useref
usecallback
usememo
useeffect
usestate:-every on single state change it will render full component

 
<Fragment>, alternatively written as <>...</>, lets you group multiple JSX nodes together.
<Profiler> lets you measure rendering performance of a React tree programmatically.
<Suspense> lets you display a fallback while the child components are loading.
<StrictMode> enables extra development-only checks that help you find bugs early.





# error boundry compoent:- we rap the small chunk of code so it that spacific data did not come it will show message.


# API
createContext lets you define and provide context to the child components. Used with useContext.
forwardRef lets your component expose a DOM node as a ref to the parent. Used with useRef.
lazy lets you defer loading a component’s code until it’s rendered for the first time.
memo lets your component skip re-renders with same props. Used with useMemo and useCallback.
startTransition lets you mark a state update as non-urgent. Similar to useTransition.
act lets you wrap renders and interactions in tests to ensure updates have processed before making assertions.


#useFormState=> helps simplify form state management and improves the performance of your forms by tracking specific states efficiently 
                it show {dispaly validation error ,fromSubmitStatus, Displays a message if the form has been modified from its initial state.}




googleAuth2.o
you should have {xyy.nibavelift.gmail.com} 
google validate it and send token which have minimum data like {Gmail & Id} in encrypted way this we store in cookies
in frontend and by API call we send this token to backend to get all needed information which is USER 
Q why this api call is needed by sending googleToken?:-To show particular user profile on portal and show specific routs option on side-bar which is allowed based on its roles. 
------------------------------------------------------
USER:-this all code is in googleContext() in frontend
email: "pradhumn.choubey@nibavlifts.com"
employeeId: "8574"
id:59
image: "https://lh3.googleusercontent.com/a/ACg8ocKxLO2yzi1K_4hpkcFitEiOe1-B6jqu-n-nK2L8FiVymypuNQ=s96-c"
name: "pradhumn choubey"
roles: 
[0: "technical-head"
 1: "production-head"
 2: "finance-head"
]
-----------------------------------------------------
token is store in [local storage or session storage] in (Nibave-project we store on cookies) and with each api request we will send that token and in backend by[role-based-check] and based on DB roles we allow the authorized api response only not for all api.



object         :-[ object is blue-print of class ] [ class is datatype and object is its value ] 
class          :- [class is (sencha) or (datatype) and object is real value if it (entity)]
inheritance    :- we can inherited from other class one class.
polymorphism   :- based on object value working is change "one thing present in many from"
encapsulation  :- reaping variable and method in class so that full project will seriated in proper way.
abstraction    :- hiding business logic method and expose some method and props to interact use that class.



# React
diff in react.memo() and usememo 
const memoizedValue = useMemo(() => expensiveCalculation(data), [data]);
const MyComponent = React.memo((props) => { return <div>{props.value}</div>;});


class
object
encaptulation  :- binding all values and method in one reper which is class or component
abstraction :- hiding all methods have busnes logic and not want to access directly 
inharitnace :- extend and implement by parent class and mothod also
polimorpicam :- one thing present in different form animal class and dog class now we can create object [Animal a = new Dog();]

normalization :- we have one big table to make it normalize
1NF:-  make sure each row have only one value in full table 
2NF:-  *1NF is satisfy 
       *all non-key column is purtily depend on candidate key and splat them into serpent table.
        and all non-key column is depend on candidate key like Table=[candidate key , non-key column].
        (candidate key :- set of column	 which uniquely identify a record like Order_num or Product_code)  
        (non-key column :- other column which is not candidate key are priment key mean not unique are non-key column)
       *every Table=[candidate key , non-key column]. should have primary key and relation between the table should be formed using foreign key.
        either by either one more column or creating serpent table for [relation table]. 
3NF:-  *2NF is satisfy
       *avoid transitive dependency
       (transitive:- example you have one table in which [customer data(A)+ order data(B)+ sales persona data(C)] so if i know A you find B form B you find C and A    you find C so make "serpent all three table")

BCNF






# Monorepo & Polyrepo:
* Monorepo:
Best if your frontend and backend are closely related and frequently need to be deployed together.
Easier for small to medium-sized projects where unified management is beneficial.
If you want tight integration between frontend and backend, go with a monorepo.
* Polyrepo:
Ideal for larger teams, more scalable projects, or when frontend and backend evolve independently.
Suitable for microservices-based architectures.
If you need independent scalability and want to isolate responsibilities, go with separate repos.


# diff in WebSockets and WebRTC and Webpack

WebSockets:
Think of it as a two-way street for real-time communication between a website and a server.
It allows for instant, continuous data exchange without constant page refreshes.   
Example: A live chat app where messages appear instantly as they're typed.

WebRTC:
This technology lets web browsers directly communicate with each other, enabling real-time audio, video, and data sharing.   
No need for a middleman server, making it faster and more efficient.   
Example: A video conferencing app like Zoom or Google Meet.   

Webpack:
It's like a superhero organizer for your web development projects.
It bundles all your code and assets (like JavaScript, CSS, images) into a few efficient files.   


---------------------------------------------------------------------------------
# webSocket --> socket.io ---> webTranspoting -----> webRTC 
# firebase --->apollo GraphQL ----> Pusher

Real-time Example Comparing Both Groups:
In your e-commerce app, you could use Group 1 (Firebase, Apollo GraphQL, Pusher) to manage things like:

Storing user data (e.g., items in a shopping cart)
Updating inventory in real-time (e.g., if a product is sold out, it reflects across all users instantly)
Sending real-time notifications (e.g., notifying users about order status updates)
You would use Group 2 (WebSocket, Socket.io, WebRTC) for:

Live customer support (chat and video)
Real-time order tracking updates (like a live map showing where a delivery is)
Instant messaging between users or live interactions

--------------------------------------------------------------------------------


# ways to deployment your porject on server or updata new feacher on server and deployment.
1. big bank deployment 
2. rolling deployment
3. blue-green deployment
4. canary development
5. feature toggle development



# how to send pdf,image,video,audio from backend to frontend to download of play 
# types of authorized and authrization
# how we upload and download video by using S3 bucket.
#  



### Types of server ### 
Physical Servers: As explained, these are actual hardware machines used for computing and storage. You manage the server directly, either on-premises or in a data center.
Virtual Servers: These are software-based servers running on physical hardware. A single physical server can host multiple virtual servers, each with its own operating system and resources.
Cloud Servers: These are virtual servers hosted on a cloud provider's infrastructure (like AWS, Google Cloud, or Microsoft Azure). They can be scaled up or down based on demand and are usually managed remotely.
Dedicated Servers: These are physical servers that are exclusively rented or used by one client. It’s similar to a physical server, but instead of owning it, you lease it from a hosting company.
Shared Servers: This is a type of hosting where multiple clients share the resources of a single physical server. Each user gets a portion of the server’s capacity but doesn’t have full control over it.
Hybrid Servers: These combine physical and virtual components, such as using both on-premise servers and cloud servers, often for balancing flexibility, cost, and performance.

# what is server ??
A physical server includes CPU, memory, hard drives, and networking components
# what is server software ??
server need some software for serving (web-server,Database,application) 
 "Web Server Software": - Hosts the user-facing part of your app (website, UI) by (Apache, Nginx)
 "Database Server Software": - Stores and retrieves data for your app (MySQL, PostgreSQL)
 "Application Server Software" :-  Runs the logic of your app and handles user requests  & runs the business logic and connects frontend, backend, and databases (Node.js, Django) 




# js code execution is not fixed based on code it will weary 
ex : let arr  =  Array.from(map.entries()).filter(([key, value]) => value > 1).map(([key]) => key); // it is right to left.
ex : let result = fn3(fn2(fn1(value))); // it is left to right.


# use of Set :- this will remove dublicate and store unique values. 
const set1 = new Set(arr1);


//----------------------------------------------------------------------------------------------------

===========    JS  all interview topic     ================

1. Core JavaScript Concepts:
Data Types & Type Coercion:
Primitive vs. reference types.
Type coercion rules (e.g., == vs ===).
Closures:
Explanation and use cases.
Practical example (e.g., function factories).
Hoisting:
How variables and functions are hoisted.
Example: var, let, const hoisting behavior.
Asynchronous JavaScript:
Callbacks, Promises, async/await.
Handling asynchronous code, avoiding callback hell.
Event loop and microtask queue.
Scope & Scope Chain:
Lexical scope, function scope, block scope (with let, const).
Global scope, local scope.
This Keyword:
How this behaves in different contexts (regular functions, arrow functions, event handlers, etc.).
Binding this (e.g., call, apply, bind).

2. Advanced JavaScript Topics:
Prototypal Inheritance:
How inheritance works in JavaScript.
Prototype chain and prototype methods.
ES6+ Features:
Arrow functions, template literals, destructuring.
Spread/rest operator, default parameters, and shorthand methods.
Modules and imports/exports.
Event Delegation:
How event delegation works in DOM manipulation.
Debouncing/Throttling:
Techniques to improve performance when handling frequent events (e.g., scrolling, typing).
Memory Management and Garbage Collection:
Understanding how JavaScript manages memory and when garbage collection happens.

3. JavaScript Design Patterns & Best Practices:
Module Pattern:
Using IIFEs (Immediately Invoked Function Expressions) and modules for encapsulating code.
Singleton Pattern:
Ensuring a class has only one instance.
Observer Pattern:
Event-driven architecture (e.g., Pub/Sub model).
Factory Pattern:
Creating objects without using new directly.
Promises and async/await Best Practices:
Avoiding "callback hell."
Using Promise.all(), Promise.race(), chaining.

4. JavaScript in Web Development:
DOM Manipulation:
Working with the DOM API (e.g., getElementById, querySelector, event handling).
Modifying DOM elements dynamically.
CSS Manipulation:
Accessing and changing styles using JavaScript.
Using classList to add/remove classes.
Fetch API / AJAX:
Making HTTP requests using fetch() and handling the responses.
Error handling in API requests.
Cross-Origin Resource Sharing (CORS):
Understanding CORS and how to manage it when making requests across different domains.

5. Performance Optimization & Security:
Lazy Loading:
Techniques for optimizing page load times (e.g., lazy loading images, modules).
Code Splitting:
Breaking the code into smaller chunks for faster loading.
Security Best Practices:
XSS (Cross-site scripting), CSRF (Cross-site request forgery) prevention.
Avoiding eval() and handling untrusted data safely.
6. Testing & Debugging:
Unit Testing:
Testing libraries (e.g., Jest, Mocha, Chai).
Writing unit tests for JavaScript functions.
Debugging:
Using browser developer tools to debug JavaScript code.
Common debugging techniques (e.g., console.log, breakpoints).

7. Frameworks & Libraries:
React.js / Angular / Vue.js (if applicable):
Understanding of component-based architecture, state management.
React lifecycle methods (or similar in other frameworks).
Redux (if using React): understanding actions, reducers, and the store.
Hooks (useState, useEffect, etc.) for React.
Node.js (if applicable):
Event-driven, non-blocking I/O model.
Working with Express.js, middleware, and routing.
Version Control with Git:
Branching, merging, resolving conflicts, and Git flow.

8. Problem Solving & Algorithms:
Sorting and Searching Algorithms:
QuickSort, MergeSort, BubbleSort, Binary Search.
Understanding their time complexity.
Data Structures:
Arrays, Linked Lists, Stacks, Queues, HashMaps.
How to manipulate these structures in JavaScript.
Common Coding Problems:
String manipulation, finding the longest substring, anagrams.
Working with arrays (e.g., sum of two numbers, finding duplicates, moving zeros).
Dynamic programming problems, recursion, and backtracking.

9. JavaScript Tools and Ecosystem:
NPM (Node Package Manager):
Understanding of npm and how to manage dependencies.
Writing custom npm scripts.
Webpack / Babel:
How bundling and transpiling work.
Understanding how Webpack can bundle JavaScript files.
CI/CD:
Continuous integration and continuous deployment pipelines (using tools like GitHub Actions, Jenkins, Travis CI).

10. Soft Skills & System Design:
Code Review:
Best practices for writing maintainable and clean code.
System Design:
You may be asked to design simple systems (e.g., a URL shortener, a chat application, etc.).
Understanding scalability, performance, and how to break a large system into smaller components.



//--------------------------------------------------------------------------------------------------------------------


For a JavaScript interview with three years of experience, the focus will likely be on both core JavaScript knowledge and practical problem-solving skills, particularly for real-world scenarios. Here are the most common coding topics that you might encounter:

1. Array and String Manipulation
Reversing an Array or String:
Reverse the elements of an array or the characters in a string.
Example: Reverse a string without using built-in functions.
Finding Duplicates in an Array:
Remove duplicates from an array, count them, or find the duplicate element.
Two-Sum Problem:
Find two numbers in an array that add up to a given target.
Longest Substring Without Repeating Characters:
Given a string, find the longest substring without repeating characters.
Anagram Checking:
Check if two strings are anagrams of each other.
2. Algorithms (Sorting and Searching)
Sorting Algorithms:
Implement sorting algorithms like QuickSort, MergeSort, BubbleSort, or InsertionSort.
Understanding their time complexity.
Binary Search:
Perform binary search on a sorted array.
Merge Two Sorted Arrays:
Merge two sorted arrays into one sorted array.
3. Recursion and Backtracking
Factorial Calculation:
Compute the factorial of a number using recursion.
Fibonacci Sequence:
Generate the Fibonacci sequence using recursion.
Permutations and Combinations:
Generate all possible permutations or combinations of a set of items.
N-Queens Problem:
Solve the N-Queens problem using backtracking.
Depth-First Search (DFS) or Breadth-First Search (BFS):
Implement DFS or BFS for traversing trees or graphs.
4. Dynamic Programming
Climbing Stairs Problem:
Given n stairs, find the number of ways to reach the top if you can take either 1 or 2 steps at a time.
Longest Common Subsequence (LCS):
Given two strings, find the length of the longest common subsequence.
Knapsack Problem:
Solve the 0/1 Knapsack problem using dynamic programming.
Coin Change Problem:
Find the minimum number of coins needed to make a target amount.
5. Object-Oriented Programming (OOP)
Classes and Inheritance:
Understanding how to define and use classes, inheritance, and methods in JavaScript.
Encapsulation and Polymorphism:
Implement concepts of encapsulation and polymorphism.
Singleton Pattern:
Implement a singleton pattern in JavaScript.
Factory Pattern:
Implement a factory function for object creation.
6. Asynchronous JavaScript
Promises:
Understanding and working with Promises. Use .then(), .catch(), and finally().
Async/Await:
Use async/await for handling asynchronous code and converting callback-based code to async functions.
Callback Functions:
Implement callback functions to handle asynchronous operations.
Event Loop:
Understand the event loop, microtasks, and macrotasks in JavaScript.
7. JavaScript Data Structures
Arrays, Stacks, and Queues:
Implement a stack and a queue using arrays or linked lists.
Solve problems involving stacks and queues, such as balancing parentheses.
HashMaps and HashSets:
Implement hash maps or hash sets and solve problems like finding the intersection of two arrays, finding duplicates, etc.
Linked Lists:
Create and manipulate singly and doubly linked lists (e.g., reversing a linked list, detecting a cycle).
Trees:
Binary Trees and Binary Search Trees (BST).
Implement tree traversals (In-order, Pre-order, Post-order).
Solve problems like finding the height of a tree or checking if a tree is balanced.
8. JavaScript DOM and Event Handling
DOM Manipulation:
Access and manipulate DOM elements (e.g., using querySelector, getElementById, and classList).
Event Handling:
Use event listeners, event delegation, and prevent default behaviors.
Understand the event propagation model (bubbling and capturing).
Debouncing and Throttling:
Implement debouncing and throttling for handling frequent events like scrolling or keypresses.
9. System Design and Scalability (Basic Level)
Design a URL Shortener:
Design a simple URL shortener system.
Design a Chat Application:
Implement basic design for a real-time chat system.
Design an API:
Design RESTful APIs with basic principles of scaling and maintaining state.
10. Miscellaneous JavaScript Topics
ES6 Features:
Destructuring, spread/rest operators, template literals, default parameters, and modules.
Memory Management and Garbage Collection:
How JavaScript handles memory and garbage collection.
Event Delegation:
Efficient handling of events, especially when dealing with dynamically generated content.
Debouncing/Throttling:
Techniques to limit the frequency of function calls in certain situations, like scrolling or input events.
11. Debugging and Error Handling
Using Browser Developer Tools:
Inspect elements, debug JavaScript, check network requests, and use breakpoints.
Error Handling:
Proper error handling using try-catch blocks and understanding custom error objects.
12. Git & Version Control (for JavaScript projects)
Git Commands:
Mastery of common Git commands like git clone, git branch, git commit, git merge, git rebase.
Version Control Best Practices:
Using branches, handling merge conflicts, and understanding the Git flow.
Tips for Interview Preparation:
Practice Algorithms: Use platforms like LeetCode, CodeSignal, and HackerRank to practice coding problems.
Understand Time and Space Complexity: Be prepared to explain the efficiency of your solution in terms of Big O notation.
Review Your Past Projects: Be ready to explain the technical decisions you made in your previous projects.
Mock Interviews: Conduct mock interviews with friends or online platforms to simulate real interview conditions.
By preparing in these areas, you'll be ready to tackle common JavaScript interview questions for someone with three years of experience!







